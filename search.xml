<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>lua_settable和lua_rawset用法</title>
      <link href="/2020/12/05/zhi-shi-zheng-li/cheng-xu-yu-yan/lua/lua-settable-he-lua-rawset-yong-fa/"/>
      <url>/2020/12/05/zhi-shi-zheng-li/cheng-xu-yu-yan/lua/lua-settable-he-lua-rawset-yong-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="lua-settable"><a href="#lua-settable" class="headerlink" title="lua_settable"></a>lua_settable</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">lua_settable</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>等价于t[k] = v的操作， 这里t是一个给定有效索引index处的值， v指栈顶的值，而k是栈顶之下的那个值。</p><p>这个函数会把键和值都从堆栈中弹出。和在 Lua 中一样，这个函数可能触发 “newindex” 事件的元方法 。</p><p>其实这个解释的意思就是，lua_settable 会把栈顶作为value,栈顶的下一个作为key设置到index指向的table，最后把这两个弹出弹出栈，这时候settable完成。</p><h2 id="lua-rawset"><a href="#lua-rawset" class="headerlink" title="lua_rawset"></a>lua_rawset</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">lua_rawset</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>类似于 lua_settable， 但是是作一个直接赋值（不触发元方法）。<br>用法同lua_settable,但lua_rawset更快(因为当key不存在时不用访问元方法__newindex</p><p>Lua:</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">local</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token function">modifyLuaArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> var <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'%s'</span><span class="token punctuation">,</span> var<span class="token punctuation">)</span><span class="token keyword">end</span></code></pre><p>Cpp:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">modifyLuaArray</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//将全局变量arrayyaruzhan</span>   <span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取array长度,因为array在栈顶,所以索引为-1,此代码等同于#array</span>   <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">lua_objlen</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//将要查找的key压入栈中,因为table索引是从1开始</span>        <span class="token function">lua_pushnumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将i弹出并将array[i]放在栈顶</span>        <span class="token comment" spellcheck="true">//此处可以用lua_settable代替,但效率更低</span>        <span class="token function">lua_rawget</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取得value</span>        std<span class="token operator">::</span>string s <span class="token operator">=</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//弹出value</span>        <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改字符串</span>        s <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"_"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//压入key</span>        <span class="token function">lua_pushnumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//压入value</span>        <span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置在-3位置的table,key为索引,value为值,即table[key] = value</span>        <span class="token comment" spellcheck="true">//因为栈顶为value,往下一个是key,故此处索引为-3</span>        <span class="token comment" spellcheck="true">//此处可以用lua_settable代替,但效率更低</span>        <span class="token function">lua_rawset</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre class=" language-console"><code class="language-console">abc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序语言 </category>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua C API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua_gettable和lua_rawget用法</title>
      <link href="/2020/12/05/zhi-shi-zheng-li/cheng-xu-yu-yan/lua/lua-gettable-he-lua-rawget-yong-fa/"/>
      <url>/2020/12/05/zhi-shi-zheng-li/cheng-xu-yu-yan/lua/lua-gettable-he-lua-rawget-yong-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="lua-gettable"><a href="#lua-gettable" class="headerlink" title="lua_gettable"></a>lua_gettable</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">lua_gettable</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>把t[k]值压入堆栈， 这里的t是指有效索引index指向的值，而k则是栈顶放的值。</p><p>这个函数会弹出堆栈上的key（把结果放在栈上相同位置）。在Lua中，这个函数可能触发对应<code>index</code>事件的元方法 。</p><hr><p>Lua:</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">local</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span></code></pre><p>Cpp:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">readLuaArray</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取全局变量array</span>    <span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取array长度,因为array在栈顶,所以索引为-1,此代码等同于#array</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">lua_objlen</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将要查找的key压入栈中,因为table索引是从1开始</span>        <span class="token function">lua_pushnumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将栈顶元素作为key,查找索引位置的tabel的值,并把key弹出压入value</span>        <span class="token comment" spellcheck="true">//此处栈顶为刚压入的i,往下一个才是array,故索引为-2</span>        <span class="token comment" spellcheck="true">//此处可以用lua_rawget代替,因为已知array是个数组型table,故可以跳过元方法,这样效率更快</span>        <span class="token function">lua_gettable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将栈顶元素转为char*</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//弹出栈顶元素value,以便下一轮循环,array依然在栈顶</span>        <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre class=" language-console"><code class="language-console">abc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序语言 </category>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua C API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua_next用法</title>
      <link href="/2020/12/05/zhi-shi-zheng-li/cheng-xu-yu-yan/lua/lua-next-yong-fa/"/>
      <url>/2020/12/05/zhi-shi-zheng-li/cheng-xu-yu-yan/lua/lua-next-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="lua-next用法"><a href="#lua-next用法" class="headerlink" title="lua_next用法"></a>lua_next用法</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lua_next</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>先从栈顶弹出一个key</li><li>从栈指定位置的 table 里取相对于刚刚弹出的key的下一对key-value，先将key入栈再将 value入栈</li><li>如果第2步成功则返回非0值，否则返回0，并且不向栈中压入任何值。table里第一对key-value的前面没有数据，所以先用 lua_pushnil() 压入一个 nil 充当初始 key。如果想从特定位置开始，须先将开始位置前一个key压入栈，再调用lua_next()</li></ol><hr><h2 id="一维表的遍历"><a href="#一维表的遍历" class="headerlink" title="一维表的遍历"></a>一维表的遍历</h2><p>Lua：</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">local</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span></code></pre><p>Cpp:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">traversalLuaTable</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//将全局变量array压入栈</span>   <span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//table 里第一对 key-value 的前面没有数据，所以先用 lua_pushnil()压入一个 nil 始 key。</span>   <span class="token function">lua_pushnil</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//此时栈顶为nil,往下才是array,故index为-2</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">lua_next</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//因为key先入栈value后入栈,故以下index为-1</span>        <span class="token comment" spellcheck="true">//获取value值类型,并根据类型获取值,打印</span>        <span class="token keyword">auto</span> valueType <span class="token operator">=</span> <span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"valueType : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_typename</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> valueType<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>valueType<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> LUA_TNUMBER<span class="token operator">:</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"value : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tonumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> LUA_TSTRING<span class="token operator">:</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"value : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//因为key先入栈value后入栈,故以下index为-2</span>        <span class="token comment" spellcheck="true">//获取key值类型,并根据类型获取值,打印</span>        <span class="token keyword">auto</span> keyType <span class="token operator">=</span> <span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"keyType : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_typename</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> keyType<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>keyType<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> LUA_TNUMBER<span class="token operator">:</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tonumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> LUA_TSTRING<span class="token operator">:</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这一步尤为重要</span>        <span class="token comment" spellcheck="true">//弹出value，让key留在栈顶</span>        <span class="token comment" spellcheck="true">//因为lua_next会先弹出前一个key,在判断table中还有没有key-value,故此处只弹出ue就可以了</span>        <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre class=" language-console"><code class="language-console">valueType : stringvalue : akeyType : numberkey : 1valueType : stringvalue : bkeyType : numberkey : 2valueType : stringvalue : ckeyType : numberkey : 3</code></pre><hr><h2 id="二维tabel遍历"><a href="#二维tabel遍历" class="headerlink" title="二维tabel遍历"></a>二维tabel遍历</h2><p>Lua:</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">local</span> array1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token keyword">local</span> array2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">}</span><span class="token keyword">local</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>array1<span class="token punctuation">,</span> array2<span class="token punctuation">}</span></code></pre><p>Cpp:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">traversalLuaTable</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">lua_pushnil</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">lua_next</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lua_istable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>            <span class="token function">lua_pushnil</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">lua_next</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">auto</span> valueType <span class="token operator">=</span> <span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"valueType : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_typename</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> valueType<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">::</span>endl<span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>valueType<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                <span class="token keyword">case</span> LUA_TNUMBER<span class="token operator">:</span>                    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"value : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tonumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">::</span>endl<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> LUA_TSTRING<span class="token operator">:</span>                    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"value : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">::</span>endl<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">auto</span> keyType <span class="token operator">=</span> <span class="token function">lua_type</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"keyType : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_typename</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> keyType<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">::</span>endl<span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>keyType<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                <span class="token keyword">case</span> LUA_TNUMBER<span class="token operator">:</span>                    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tonumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> LUA_TSTRING<span class="token operator">:</span>                    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre class=" language-console"><code class="language-console">valueType : stringvalue : akeyType : numberkey : 1valueType : stringvalue : bkeyType : numberkey : 2valueType : stringvalue : ckeyType : numberkey : 3valueType : stringvalue : dkeyType : numberkey : 1valueType : stringvalue : ekeyType : numberkey : 2valueType : stringvalue : fkeyType : numberkey : 3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序语言 </category>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua C API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua虚拟堆栈(virtual stack)</title>
      <link href="/2020/12/05/zhi-shi-zheng-li/cheng-xu-yu-yan/lua/lua-xu-ni-dui-zhan/"/>
      <url>/2020/12/05/zhi-shi-zheng-li/cheng-xu-yu-yan/lua/lua-xu-ni-dui-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="Lua虚拟堆栈-virtual-stack"><a href="#Lua虚拟堆栈-virtual-stack" class="headerlink" title="Lua虚拟堆栈(virtual stack)"></a>Lua虚拟堆栈(virtual stack)</h2><p>Lua 使用一个虚拟栈来和 C 传递值。 栈上的的每个元素都是一个 Lua 值 （nil，数字，字符串，等等）。</p><p>无论何时 Lua 调用 C，被调用的函数都得到一个新的栈， 这个栈独立于 C 函数本身的堆栈，也独立于以前的栈。 （译注：在 C 函数里，用 Lua API 不能访问到 Lua 状态机中本次调用之外的堆栈中的数据） 它里面包含了 Lua 传递给 C 函数的所有参数， 而 C 函数则把要返回的结果也放入堆栈以返回给调用者。</p><p><img src="/images/Lua/=_UTF8_B_Li9RUeaIquWbvjIwMTYwODEwMTgxMTU1LnBuZw==_=.jpg" alt=""><br>方便起见，所有针对栈的 API 查询操作都不严格遵循栈的操作规则。 而是可以用一个索引来指向栈上的任何元素： <code>正的索引指的是栈上的绝对位置（从一开始）；负的索引则指从栈顶开始的偏移量</code>。 更详细的说明一下，如果堆栈有 n 个元素， 那么索引 1 表示第一个元素（也就是最先被压入堆栈的元素） 而索引 n 则指最后一个元素； 索引 -1 也是指最后一个元素（即栈顶的元素）， 索引 -n 是指第一个元素。 如果索引在 1 到栈顶之间（也就是，1 ≤ abs(index) ≤ top） 我们就说这是个有效的索引。</p>]]></content>
      
      
      <categories>
          
          <category> 程序语言 </category>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua C API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加隐藏文章功能</title>
      <link href="/2020/12/04/zhi-shi-zheng-li/bo-ke/hexo-bo-ke-tian-jia-yin-cang-wen-zhang-gong-neng/"/>
      <url>/2020/12/04/zhi-shi-zheng-li/bo-ke/hexo-bo-ke-tian-jia-yin-cang-wen-zhang-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>为 Hexo 博客添加隐藏文章功能<br><a href="https://printempw.github.io/hexo-plugin-to-make-posts-sage-unlisted/" target="_blank" rel="noopener">https://printempw.github.io/hexo-plugin-to-make-posts-sage-unlisted/</a></p><p>于是我写了一个 Hexo 插件 hexo-hide-posts 来实现这个需求（网上也有一些关于 Hexo 隐藏文章的教程，不过一般都要求修改主题文件，还是我这样写个插件更通用一些）。它的功能如下：<br>在博客的所有文章列表中隐藏指定的文章（包括首页、存档页、分类标签、Feed 等）；<br>被隐藏的文章依然可以通过文章链接直接访问（比如 <a href="https://hexo.example/{slug}/）；" target="_blank" rel="noopener">https://hexo.example/{slug}/）；</a><br>除非知道链接，任何人都无法找到这些被隐藏的文章。</p><p>插件下载地址：<br><a href="https://github.com/printempw/hexo-hide-posts" target="_blank" rel="noopener">https://github.com/printempw/hexo-hide-posts</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>改善CSharp程序的50种方法</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/bian-cheng-si-xiang/gai-shan-csharp-cheng-xu-de-50-chong-fang-fa/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/bian-cheng-si-xiang/gai-shan-csharp-cheng-xu-de-50-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Effective-C-改善C-程序的50种方法"><a href="#Effective-C-改善C-程序的50种方法" class="headerlink" title="Effective C# 改善C#程序的50种方法"></a>Effective C# 改善C#程序的50种方法</h2><p><a href="https://wizardforcel.gitbooks.io/effective-csharp/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/effective-csharp/content/</a></p><h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><p><a href="https://kb.cnblogs.com/page/106722/" target="_blank" rel="noopener">https://kb.cnblogs.com/page/106722/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>教程</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/jiao-cheng/jiao-cheng/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/jiao-cheng/jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="C-and-Shader-Tutorials-for-the-Unity-Engine"><a href="#C-and-Shader-Tutorials-for-the-Unity-Engine" class="headerlink" title="C# and Shader Tutorials for the Unity Engine"></a>C# and Shader Tutorials for the Unity Engine</h2><p><a href="https://catlikecoding.com/unity/tutorials/" target="_blank" rel="noopener">https://catlikecoding.com/unity/tutorials/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模糊算法</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/xuan-ran/mo-hu-suan-fa/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/xuan-ran/mo-hu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="模糊算法"><a href="#模糊算法" class="headerlink" title="模糊算法"></a>模糊算法</h2><p><a href="https://zhuanlan.zhihu.com/p/125744132" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/125744132</a><br><a href="https://github.com/QianMo/X-PostProcessing-Library" target="_blank" rel="noopener">https://github.com/QianMo/X-PostProcessing-Library</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LiteNetLib</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/wang-luo-bian-cheng/litenetlib/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/wang-luo-bian-cheng/litenetlib/</url>
      
        <content type="html"><![CDATA[<h2 id="LiteNetLib"><a href="#LiteNetLib" class="headerlink" title="LiteNetLib"></a>LiteNetLib</h2><p><a href="https://hebomou.top/archives/1729" target="_blank" rel="noopener">https://hebomou.top/archives/1729</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zenject</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/unity/zenject/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/unity/zenject/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43405845/article/details/104344019" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43405845/article/details/104344019</a><br><a href="https://blog.csdn.net/weixin_43405845/category_9725154.html" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43405845/category_9725154.html</a><br><a href="https://blog.csdn.net/inspironx/article/details/97621935" target="_blank" rel="noopener">https://blog.csdn.net/inspironx/article/details/97621935</a><br><a href="https://www.jianshu.com/p/e002bd91b205" target="_blank" rel="noopener">https://www.jianshu.com/p/e002bd91b205</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DIP_IoC_DI以及IoC容器</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/bian-cheng-si-xiang/dip-ioc-di-yi-ji-ioc-rong-qi/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/bian-cheng-si-xiang/dip-ioc-di-yi-ji-ioc-rong-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="深入理解DIP、IoC、DI以及IoC容器"><a href="#深入理解DIP、IoC、DI以及IoC容器" class="headerlink" title="深入理解DIP、IoC、DI以及IoC容器"></a>深入理解DIP、IoC、DI以及IoC容器</h3><p><a href="https://www.cnblogs.com/liuhaorain/p/3747470.html#title_2" target="_blank" rel="noopener">https://www.cnblogs.com/liuhaorain/p/3747470.html#title_2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpriteAtlas</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/unity/spriteatlas/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/unity/spriteatlas/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/2640bdb29fdc" target="_blank" rel="noopener">https://www.jianshu.com/p/2640bdb29fdc</a></p><p><a href="https://blog.csdn.net/egostudio/article/details/104695907" target="_blank" rel="noopener">https://blog.csdn.net/egostudio/article/details/104695907</a></p><p><a href="http://www.liuocean.com/index.php/2019/12/22/et-addressables-spriteatlas-tu-ji-jie-jue-fang-an/" target="_blank" rel="noopener">http://www.liuocean.com/index.php/2019/12/22/et-addressables-spriteatlas-tu-ji-jie-jue-fang-an/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityLua</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/unity/unitylua/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/unity/unitylua/</url>
      
        <content type="html"><![CDATA[<h3 id="Lua依赖注入"><a href="#Lua依赖注入" class="headerlink" title="Lua依赖注入"></a>Lua依赖注入</h3><p><a href="https://toutiao.io/posts/kqdq7e/preview" target="_blank" rel="noopener">https://toutiao.io/posts/kqdq7e/preview</a></p><h3 id="EmmyLua"><a href="#EmmyLua" class="headerlink" title="EmmyLua"></a>EmmyLua</h3><p><a href="https://emmylua.github.io/index.html" target="_blank" rel="noopener">https://emmylua.github.io/index.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Addressable</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/unity/addressable/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/unity/addressable/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/77600079" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/77600079</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity渲染顺序</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/unity/unity-xuan-ran-shun-xu/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/unity/unity-xuan-ran-shun-xu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://dev.twsiyuan.com/2018/05/unity-rendering-order.html" target="_blank" rel="noopener">https://dev.twsiyuan.com/2018/05/unity-rendering-order.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DoozyUI</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/unity/doozyui/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/unity/doozyui/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_38239050/category_10146754.html" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38239050/category_10146754.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>伽马空间与线性空间</title>
      <link href="/2020/12/04/zhi-shi-shou-ji/xuan-ran/jia-ma-kong-jian-yu-xian-xing-kong-jian/"/>
      <url>/2020/12/04/zhi-shi-shou-ji/xuan-ran/jia-ma-kong-jian-yu-xian-xing-kong-jian/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/bill2ccssddnn/article/details/53423410" target="_blank" rel="noopener">https://blog.csdn.net/bill2ccssddnn/article/details/53423410</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>项目规划</title>
      <link href="/2020/10/26/xiang-mu-gui-hua/"/>
      <url>/2020/10/26/xiang-mu-gui-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ol><li>日志系统</li><li>UI 数据驱动 面向数据</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity性能优化</title>
      <link href="/2020/07/28/zhi-shi-shou-ji/unity/unity-xing-neng-you-hua/"/>
      <url>/2020/07/28/zhi-shi-shou-ji/unity/unity-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><h3 id="动态静态分离"><a href="#动态静态分离" class="headerlink" title="动态静态分离"></a>动态静态分离</h3><p><a href="https://support.unity3d.com/hc/en-us/articles/115000355466-Split-canvas-for-dynamic-objects-Split" target="_blank" rel="noopener">Split Canvas For Dynamic Objects</a></p><p><a href="https://learn.unity.com/tutorial/working-with-static-and-dynamic-canvases#" target="_blank" rel="noopener">Working with Static and Dynamic Canvases</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>工作积累</title>
      <link href="/2020/07/15/gong-zuo-ji-lei/"/>
      <url>/2020/07/15/gong-zuo-ji-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="Lua中require、dofile、loadfile的区别"><a href="#Lua中require、dofile、loadfile的区别" class="headerlink" title="Lua中require、dofile、loadfile的区别"></a>Lua中require、dofile、loadfile的区别</h2><p><a href="https://blog.csdn.net/leecrest/article/details/31742419" target="_blank" rel="noopener">https://blog.csdn.net/leecrest/article/details/31742419</a></p><h2 id="C-终结器就是析构函数"><a href="#C-终结器就是析构函数" class="headerlink" title="C#终结器就是析构函数"></a>C#终结器就是析构函数</h2><h2 id="GC-SuppressFinalize用法"><a href="#GC-SuppressFinalize用法" class="headerlink" title="GC.SuppressFinalize用法"></a>GC.SuppressFinalize用法</h2><p><a href="https://www.codenong.com/151051/" target="_blank" rel="noopener">https://www.codenong.com/151051/</a></p><h2 id="计算函数执行时间"><a href="#计算函数执行时间" class="headerlink" title="计算函数执行时间"></a>计算函数执行时间</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CalculateExcutedTime</span><span class="token punctuation">(</span><span class="token keyword">string</span> tag<span class="token punctuation">,</span> Action func<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> oldTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>    <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Execute time of \""</span> <span class="token operator">+</span> tag <span class="token operator">+</span> <span class="token string">"\" is "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>newTime <span class="token operator">-</span> oldTime<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalSeconds <span class="token operator">+</span> <span class="token string">" seconds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>git lfs prune</p><hr><p>git remote set-branches origin ‘develop’<br>git fetch –depth 1 origin ‘develop’<br>git checkout ‘develop’</p><h3 id="git-clone-–depth-1-之后怎样获取完整仓库"><a href="#git-clone-–depth-1-之后怎样获取完整仓库" class="headerlink" title="git clone –depth=1 之后怎样获取完整仓库?"></a>git clone –depth=1 之后怎样获取完整仓库?</h3><pre><code>`git pull --unshallow`</code></pre><h2 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h2><h3 id="生成SSHKey"><a href="#生成SSHKey" class="headerlink" title="生成SSHKey"></a>生成SSHKey</h3><p>GitHub格式为：</p><pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAqb6AhR8caJ+HtRHTJrlHSmYARegX1YxvUrIRzOeQBkXsGT94Ns3NGDNflxm31haDppYP3bLiBvFmtjXdaKuRrdnK7S5gb8xurDWN+fC+EsXeGZXwhCIGg5o7lRXVsE1bkidn3JAwwtqXfp2sJ6yPc9eOyatrqVjENwHZIulYwSAdPz0uMqvKW+VgkRNoZkzvAJtIEWnBim+gugYaL5ORduQzqDWduLG8fsS34Ha3SHd8+0b2Ehj4KoE+fdcMtTzWLgepLSaHN9rzkCjDZ8zTYqZit3cDDMoPhlu5+qog1ZbBfHHe5s4ZtUsBjKi/sdUcPU4mon7f8MZt9CLHMx6+oQ==</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>壳木工作记录</title>
      <link href="/2020/07/15/ke-mu-gong-zuo-ji-lu/"/>
      <url>/2020/07/15/ke-mu-gong-zuo-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="SVN地址"><a href="#SVN地址" class="headerlink" title="SVN地址"></a>SVN地址</h2><p>svn://192.160.1.200/doomsday/planner/策划配置<br>svn://192.160.1.200/doomsday/planner/策划文档</p><h2 id="Aoz设计分辨率750-1334"><a href="#Aoz设计分辨率750-1334" class="headerlink" title="Aoz设计分辨率750*1334"></a>Aoz设计分辨率750*1334</h2><h2 id="Lua编辑器使用的是IntelliJ-IDEA和emmylua插件"><a href="#Lua编辑器使用的是IntelliJ-IDEA和emmylua插件" class="headerlink" title="Lua编辑器使用的是IntelliJ IDEA和emmylua插件"></a>Lua编辑器使用的是IntelliJ IDEA和emmylua插件</h2><h3 id="Lua调试配置"><a href="#Lua调试配置" class="headerlink" title="Lua调试配置"></a>Lua调试配置</h3><p><a href="https://www.jianshu.com/p/5a453a80b7e9" target="_blank" rel="noopener">https://www.jianshu.com/p/5a453a80b7e9</a></p><h2 id="NGUI-ScrollView相关功能介绍"><a href="#NGUI-ScrollView相关功能介绍" class="headerlink" title="NGUI ScrollView相关功能介绍"></a>NGUI ScrollView相关功能介绍</h2><p><a href="https://gameinstitute.qq.com/community/detail/127300" target="_blank" rel="noopener">https://gameinstitute.qq.com/community/detail/127300</a><br><a href="https://www.cnblogs.com/hammerc/p/4656505.html" target="_blank" rel="noopener">https://www.cnblogs.com/hammerc/p/4656505.html</a></p><h2 id="看代码"><a href="#看代码" class="headerlink" title="看代码"></a>看代码</h2><ol><li>大地图区域裁剪</li><li>主城水波纹怎么处理</li></ol><hr><h2 id="工作记录"><a href="#工作记录" class="headerlink" title="工作记录"></a>工作记录</h2><h3 id="发现的问题"><a href="#发现的问题" class="headerlink" title="发现的问题"></a>发现的问题</h3><h4 id="协议相关"><a href="#协议相关" class="headerlink" title="协议相关"></a>协议相关</h4><h5 id="在收到协议数据没有做有效性的检查，导致业务层在取数据的时候报错"><a href="#在收到协议数据没有做有效性的检查，导致业务层在取数据的时候报错" class="headerlink" title="在收到协议数据没有做有效性的检查，导致业务层在取数据的时候报错"></a>在收到协议数据没有做有效性的检查，导致业务层在取数据的时候报错</h5><p>这个错误不应该出现在业务层，应该在收到协议的时候就抛出错误。</p><h4 id="协议没有说明文档，导致工作难以交接，沟通成本很大，而起容易出现问题"><a href="#协议没有说明文档，导致工作难以交接，沟通成本很大，而起容易出现问题" class="headerlink" title="协议没有说明文档，导致工作难以交接，沟通成本很大，而起容易出现问题"></a>协议没有说明文档，导致工作难以交接，沟通成本很大，而起容易出现问题</h4><p>编写协议文档，不光是字段的说明，一些复杂的功s能模块，还应该编写协议的流程图或者时序图。</p><h4 id="没有代码审查，经常出现硬编码，没有注释问题"><a href="#没有代码审查，经常出现硬编码，没有注释问题" class="headerlink" title="没有代码审查，经常出现硬编码，没有注释问题"></a>没有代码审查，经常出现硬编码，没有注释问题</h4><p>硬编码的问题，一个是程序员自己的问题，还有一个是数据没有使用配置造成的。</p>]]></content>
      
      
      <categories>
          
          <category> 工作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 壳木 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Ecs 使用问题</title>
      <link href="/2020/07/08/zhi-shi-zheng-li/you-xi-yin-qing/unity/unity-ecs-shi-yong-wen-ti/"/>
      <url>/2020/07/08/zhi-shi-zheng-li/you-xi-yin-qing/unity/unity-ecs-shi-yong-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="JobSystem使用问题"><a href="#JobSystem使用问题" class="headerlink" title="JobSystem使用问题"></a>JobSystem使用问题</h2><ol><li>函数体内断点不能命中</li><li>函数体内不能使用C#的容器只能使用Unity的NativeContainer容器，而NativeHashMap不能是使用<code>集合初始化器</code>，如果涉及到读取静态数据的时候将会很麻烦。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Ecs </category>
          
          <category> Unity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年看过的电影</title>
      <link href="/2020/06/29/sheng-huo/2020-nian-kan-guo-de-dian-ying/"/>
      <url>/2020/06/29/sheng-huo/2020-nian-kan-guo-de-dian-ying/</url>
      
        <content type="html"><![CDATA[<h2 id="辩护人"><a href="#辩护人" class="headerlink" title="辩护人"></a>辩护人</h2><p><a href="https://movie.douban.com/subject/21937445/" target="_blank" rel="noopener">https://movie.douban.com/subject/21937445/</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity ShaderGraph</title>
      <link href="/2020/06/26/zhi-shi-shou-ji/unity/unity-shadergraph/"/>
      <url>/2020/06/26/zhi-shi-shou-ji/unity/unity-shadergraph/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/35887656" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35887656</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#装箱和拆箱</title>
      <link href="/2020/06/26/zhi-shi-zheng-li/cheng-xu-yu-yan/c/c-zhuang-xiang-he-chai-xiang/"/>
      <url>/2020/06/26/zhi-shi-zheng-li/cheng-xu-yu-yan/c/c-zhuang-xiang-he-chai-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>装箱是将<code>值类型</code>转换为<code>引用类型</code>。<br>拆箱是将<code>引用类型</code>转换为<code>值类型</code>。</p><h2 id="装箱的内存操作"><a href="#装箱的内存操作" class="headerlink" title="装箱的内存操作"></a>装箱的内存操作</h2><ol><li>在托管堆上分配一段内存(大小为值类型实例大小加上一个方法表指针和一个SyncBlockIndex)。 </li><li>将值类型的数据拷贝到刚刚分配的内存中。</li><li>返回托管堆中新分配对象的地址。这个地址就是一个指向对象的引用了。</li></ol><blockquote><p>进行一次装箱要进行<code>分配内存</code>和<code>拷贝数据</code>。</p></blockquote><h2 id="拆箱的内存操作"><a href="#拆箱的内存操作" class="headerlink" title="拆箱的内存操作"></a>拆箱的内存操作</h2><ol><li>首先获取托管堆中属于值类型那部分字段的地址，这一步是严格意义上的拆箱。</li><li>将引用对象中的值拷贝到位于线程堆栈上的值类型实例中。</li></ol><blockquote><p>进行一次拆箱要进行<code>拷贝数据</code>。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1eW411v76V?from=search&amp;seid=11233487436428803311" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1eW411v76V?from=search&amp;seid=11233487436428803311</a><br><a href="https://blog.csdn.net/qiaoquan3/article/details/51439726" target="_blank" rel="noopener">https://blog.csdn.net/qiaoquan3/article/details/51439726</a></p>]]></content>
      
      
      <categories>
          
          <category> 程序语言 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++拷贝构造函数和赋值运算符</title>
      <link href="/2020/06/22/zhi-shi-zheng-li/cheng-xu-yu-yan/cpp/c-kao-bei-gou-zao-han-shu/"/>
      <url>/2020/06/22/zhi-shi-zheng-li/cheng-xu-yu-yan/cpp/c-kao-bei-gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在默认情况下（用户没有定义，但是也没有显式的删除），编译器会自动的隐式生成一个拷贝构造函数和赋值运算符。但用户可以使用<code>delete</code>来指定不生成拷贝构造函数和赋值运算符，这样的对象就不能通过值传递，也不能进行赋值运算。</p><p>显示定义：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Preson</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 拷贝构造函数</span>    <span class="token function">Preson</span><span class="token punctuation">(</span><span class="token keyword">const</span> Preson<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 赋值运算符函数</span>    Preson<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Preson<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>C++11新特性，显示删除：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Preson</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 拷贝构造函数</span>    <span class="token function">Preson</span><span class="token punctuation">(</span><span class="token keyword">const</span> Preson<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 赋值运算符函数</span>    Preson<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Preson<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：拷贝构造函数的参数一定是以<code>引用的方式传递的</code>，如果使用值传递的方式，强出现无限循环递归，栈会溢出。</p></blockquote><h2 id="何时调用"><a href="#何时调用" class="headerlink" title="何时调用"></a>何时调用</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Preson</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Preson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Preson</span><span class="token punctuation">(</span><span class="token keyword">const</span> Preson<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        name <span class="token operator">=</span> other<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Preson<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Preson<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"赋值运算符函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        name <span class="token operator">=</span> other<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Fun1</span><span class="token punctuation">(</span>Preson p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Preson <span class="token function">Fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Preson p<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Preson p<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Preson p1 <span class="token operator">=</span> p<span class="token punctuation">;</span>    Preson p2<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> p<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">Fun1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> <span class="token function">Fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Preson p3 <span class="token operator">=</span> <span class="token function">Fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：<br><img src="/images/C++%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/1.jpg" alt=""></p><ol><li>虽然出现的<code>=</code>，但是实际上使用对象p来创建一个新的对象p1，也就是构造新的对象，所以调用的是<code>拷贝构造函数</code>。</li><li>首先声明一个对象p2，然后使用赋值运算符”=”，将p的值复制给p2，显然是调用赋值运算符，为一个已经存在的对象赋值，所以调用的是<code>赋值运算符函数</code>。</li><li>以<code>值传递的方式</code>将对象p2传入函数Fun1内，调用拷贝构造函数<code>构建一个函数Fun1可用的实参</code>，所以调用的是<code>拷贝构造函数</code>。</li><li>在函数Fun2以值传递的方式返回时，用拷贝构造函数创建一个临时对象作为返回值，，所以调用的是<code>拷贝构造函数</code>。在函数返回后将临时变量赋值给已经初始化过的p2，所以调用的是<code>赋值运算符函数</code>。</li><li>如果按照4的情况解释，应该是首先调用拷贝构造函数创建临时对象；然后再调用拷贝构造函数使用刚才创建的临时对象创建新的对象p3，也就是会调用两次拷贝构造函数。可能是编译器优化了，应该是直接调用拷贝构造函数使用返回值创建了对象p3，所以只调用了一次<code>拷贝构造函数</code>。</li></ol><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><ol><li>当对象作为函数的参数，以值传递的方式传递给函数时。</li><li>当对象作为函数的返回值，以值传递的方式返回时。</li><li>当使用一个对象初始化另一个对象时。</li></ol><h3 id="赋值运算符函数"><a href="#赋值运算符函数" class="headerlink" title="赋值运算符函数"></a>赋值运算符函数</h3><p>当一个对象赋值给另一个已经初始化完成的对象时。</p><h2 id="什么时候需要使用"><a href="#什么时候需要使用" class="headerlink" title="什么时候需要使用"></a>什么时候需要使用</h2><p>当成员变量里有指针类型的时候，因为默认的拷贝构造函数和赋值运算符函数都是值的复制是<code>浅拷贝的</code>，对于指针只是简单的值复制并不能分割开两个对象的关联，任何一个对象对该指针的操作都会影响到另一个对象。这时候就需要提供自定义的<code>深拷贝</code>的拷贝构造函数，消除这种影响。</p><p>通常的原则是：</p><ol><li>含有指针类型的成员或者有动态分配内存的成员都应该提供自定义的拷贝构造函数。</li><li>在提供拷贝构造函数的同时，还应该考虑实现自定义的赋值运算符。</li><li>对于值类型的成员进行值复制。</li><li>对于指针和动态分配的空间，在拷贝中应重新分配分配空间。</li><li>对于基类，要调用基类合适的拷贝方法，完成基类的拷贝。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>拷贝构造函数和赋值运算符的行为比较相似，却产生不同的结果；拷贝构造函数<code>使用已有的对象创建一个新的对象</code>，赋值运算符<code>是将一个对象的值复制给另一个已存在的对象</code>。区分是调用拷贝构造函数还是赋值运算符，主要是<code>否有新的对象产生</code>。</li><li>关于深拷贝和浅拷贝。当类有指针成员或有动态分配空间，都应实现自定义的拷贝构造函数。提供了拷贝构造函数，最后也实现赋值运算符。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/wangguchangqing/p/6141743.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangguchangqing/p/6141743.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 程序语言 </category>
          
          <category> Cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UV坐标</title>
      <link href="/2020/06/22/zhi-shi-shou-ji/xuan-ran/uv-zuo-biao/"/>
      <url>/2020/06/22/zhi-shi-shou-ji/xuan-ran/uv-zuo-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p><a href="https://www.bilibili.com/video/BV1Pt411K7Jv?from=search&amp;seid=4784504123734508545" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Pt411K7Jv?from=search&amp;seid=4784504123734508545</a><br><a href="https://www.bilibili.com/video/BV18E411j7oY?from=search&amp;seid=4784504123734508545" target="_blank" rel="noopener">https://www.bilibili.com/video/BV18E411j7oY?from=search&amp;seid=4784504123734508545</a></p>]]></content>
      
      
      <categories>
          
          <category> 渲染 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UV坐标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建</title>
      <link href="/2020/06/21/zhi-shi-zheng-li/bo-ke/bo-ke-da-jian/"/>
      <url>/2020/06/21/zhi-shi-zheng-li/bo-ke/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ol><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">下载地址</a>，安装选项全部默认，一路点击Next。</li><li>安装检查，<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。<br><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.jpg" alt=""></li></ol><h2 id="创建本地Hexo"><a href="#创建本地Hexo" class="headerlink" title="创建本地Hexo"></a>创建本地Hexo</h2><ol><li>找一个地方新建一个文件夹，用来存放自己的博客文件，比如我的博客目录是<code>D:\Blog\</code>，进入文件夹目录。</li><li>在该目录下右键点击<code>Git Bash Here</code>, 打开git的控制台窗口，之后所有的操作都是在git控制台进行的。</li><li>输入<code>npm i hexo-cli -g</code>安装Hexo。</li><li>输入<code>hexo -v</code>验证是否安装成功。</li><li>输入<code>hexo init</code>初始化文件夹。</li><li>输入<code>npm install</code>安装必备的组件。</li><li>输入<code>hexo clean</code>清理。</li><li>输入<code>hexo g</code>生成静态网页。</li><li>输入<code>hexo s</code>打开本地服务器。</li><li>打开浏览器<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，看到下图说操作正确。</li><li>输入<code>ctrl+c</code>关闭本地服务器。</li></ol><p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.jpg" alt=""></p><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><ol><li>打开git控制台，输入<code>hexo new post &quot;文章标题&quot;</code>，在<code>D:\Blog\source\_posts</code>目录下生成一个名为<code>文章标题.md</code>的文件。</li><li><code>文章标题.md</code>开始编辑。</li><li>输入<code>hexo clean</code>清理。</li><li>输入<code>hexo g</code>生成静态网页。</li><li>输入<code>hexo s</code>打开本地服务器。</li><li>打开浏览器<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>预览。</li></ol><h2 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h2><ol><li>在Github上建立一个新的仓库，名字为<code>你的账号名字.github.io</code>，如：<code>your_name.github.io</code>。</li><li>打开<code>D:\Blog\_config.yml</code>文件。</li><li>在最下面找到<code># Deployment</code>标签，修改如下。</li></ol><pre><code>deploy:  type: &#39;git&#39;  repo: https://github.com/your_name/your_name.github.io.git  branch: master</code></pre><ol><li>打开git控制台，输入<code>npm i hexo-deployer-git</code>安装插件。</li><li>输入<code>hexo clean</code>清理。</li><li>输入<code>hexo g</code>生成静态网页。</li><li>输入<code>hexo d</code>上传到github。</li><li>打开浏览器，输入地址<code>https://your_name.github.io</code>，如果没有正常显示可以需要等一下，再刷新看看。</li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">中文说明文档</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35668237</a></li><li><a href="https://www.bilibili.com/video/BV1EE411N7Bi?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1EE411N7Bi?p=1</a></li><li><a href="https://www.bilibili.com/video/BV1Yb411a7ty?t=1163" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty?t=1163</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
